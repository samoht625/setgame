{
  "version": 3,
  "sources": ["../../../node_modules/@rails/actioncable/app/assets/javascripts/actioncable.esm.js", "../../javascript/cable.ts"],
  "sourcesContent": ["var adapters = {\n  logger: typeof console !== \"undefined\" ? console : undefined,\n  WebSocket: typeof WebSocket !== \"undefined\" ? WebSocket : undefined\n};\n\nvar logger = {\n  log(...messages) {\n    if (this.enabled) {\n      messages.push(Date.now());\n      adapters.logger.log(\"[ActionCable]\", ...messages);\n    }\n  }\n};\n\nconst now = () => (new Date).getTime();\n\nconst secondsSince = time => (now() - time) / 1e3;\n\nclass ConnectionMonitor {\n  constructor(connection) {\n    this.visibilityDidChange = this.visibilityDidChange.bind(this);\n    this.connection = connection;\n    this.reconnectAttempts = 0;\n  }\n  start() {\n    if (!this.isRunning()) {\n      this.startedAt = now();\n      delete this.stoppedAt;\n      this.startPolling();\n      addEventListener(\"visibilitychange\", this.visibilityDidChange);\n      logger.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);\n    }\n  }\n  stop() {\n    if (this.isRunning()) {\n      this.stoppedAt = now();\n      this.stopPolling();\n      removeEventListener(\"visibilitychange\", this.visibilityDidChange);\n      logger.log(\"ConnectionMonitor stopped\");\n    }\n  }\n  isRunning() {\n    return this.startedAt && !this.stoppedAt;\n  }\n  recordMessage() {\n    this.pingedAt = now();\n  }\n  recordConnect() {\n    this.reconnectAttempts = 0;\n    delete this.disconnectedAt;\n    logger.log(\"ConnectionMonitor recorded connect\");\n  }\n  recordDisconnect() {\n    this.disconnectedAt = now();\n    logger.log(\"ConnectionMonitor recorded disconnect\");\n  }\n  startPolling() {\n    this.stopPolling();\n    this.poll();\n  }\n  stopPolling() {\n    clearTimeout(this.pollTimeout);\n  }\n  poll() {\n    this.pollTimeout = setTimeout((() => {\n      this.reconnectIfStale();\n      this.poll();\n    }), this.getPollInterval());\n  }\n  getPollInterval() {\n    const {staleThreshold: staleThreshold, reconnectionBackoffRate: reconnectionBackoffRate} = this.constructor;\n    const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));\n    const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;\n    const jitter = jitterMax * Math.random();\n    return staleThreshold * 1e3 * backoff * (1 + jitter);\n  }\n  reconnectIfStale() {\n    if (this.connectionIsStale()) {\n      logger.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);\n      this.reconnectAttempts++;\n      if (this.disconnectedRecently()) {\n        logger.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`);\n      } else {\n        logger.log(\"ConnectionMonitor reopening\");\n        this.connection.reopen();\n      }\n    }\n  }\n  get refreshedAt() {\n    return this.pingedAt ? this.pingedAt : this.startedAt;\n  }\n  connectionIsStale() {\n    return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;\n  }\n  disconnectedRecently() {\n    return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;\n  }\n  visibilityDidChange() {\n    if (document.visibilityState === \"visible\") {\n      setTimeout((() => {\n        if (this.connectionIsStale() || !this.connection.isOpen()) {\n          logger.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);\n          this.connection.reopen();\n        }\n      }), 200);\n    }\n  }\n}\n\nConnectionMonitor.staleThreshold = 6;\n\nConnectionMonitor.reconnectionBackoffRate = .15;\n\nvar INTERNAL = {\n  message_types: {\n    welcome: \"welcome\",\n    disconnect: \"disconnect\",\n    ping: \"ping\",\n    confirmation: \"confirm_subscription\",\n    rejection: \"reject_subscription\"\n  },\n  disconnect_reasons: {\n    unauthorized: \"unauthorized\",\n    invalid_request: \"invalid_request\",\n    server_restart: \"server_restart\",\n    remote: \"remote\"\n  },\n  default_mount_path: \"/cable\",\n  protocols: [ \"actioncable-v1-json\", \"actioncable-unsupported\" ]\n};\n\nconst {message_types: message_types, protocols: protocols} = INTERNAL;\n\nconst supportedProtocols = protocols.slice(0, protocols.length - 1);\n\nconst indexOf = [].indexOf;\n\nclass Connection {\n  constructor(consumer) {\n    this.open = this.open.bind(this);\n    this.consumer = consumer;\n    this.subscriptions = this.consumer.subscriptions;\n    this.monitor = new ConnectionMonitor(this);\n    this.disconnected = true;\n  }\n  send(data) {\n    if (this.isOpen()) {\n      this.webSocket.send(JSON.stringify(data));\n      return true;\n    } else {\n      return false;\n    }\n  }\n  open() {\n    if (this.isActive()) {\n      logger.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);\n      return false;\n    } else {\n      const socketProtocols = [ ...protocols, ...this.consumer.subprotocols || [] ];\n      logger.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${socketProtocols}`);\n      if (this.webSocket) {\n        this.uninstallEventHandlers();\n      }\n      this.webSocket = new adapters.WebSocket(this.consumer.url, socketProtocols);\n      this.installEventHandlers();\n      this.monitor.start();\n      return true;\n    }\n  }\n  close({allowReconnect: allowReconnect} = {\n    allowReconnect: true\n  }) {\n    if (!allowReconnect) {\n      this.monitor.stop();\n    }\n    if (this.isOpen()) {\n      return this.webSocket.close();\n    }\n  }\n  reopen() {\n    logger.log(`Reopening WebSocket, current state is ${this.getState()}`);\n    if (this.isActive()) {\n      try {\n        return this.close();\n      } catch (error) {\n        logger.log(\"Failed to reopen WebSocket\", error);\n      } finally {\n        logger.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);\n        setTimeout(this.open, this.constructor.reopenDelay);\n      }\n    } else {\n      return this.open();\n    }\n  }\n  getProtocol() {\n    if (this.webSocket) {\n      return this.webSocket.protocol;\n    }\n  }\n  isOpen() {\n    return this.isState(\"open\");\n  }\n  isActive() {\n    return this.isState(\"open\", \"connecting\");\n  }\n  triedToReconnect() {\n    return this.monitor.reconnectAttempts > 0;\n  }\n  isProtocolSupported() {\n    return indexOf.call(supportedProtocols, this.getProtocol()) >= 0;\n  }\n  isState(...states) {\n    return indexOf.call(states, this.getState()) >= 0;\n  }\n  getState() {\n    if (this.webSocket) {\n      for (let state in adapters.WebSocket) {\n        if (adapters.WebSocket[state] === this.webSocket.readyState) {\n          return state.toLowerCase();\n        }\n      }\n    }\n    return null;\n  }\n  installEventHandlers() {\n    for (let eventName in this.events) {\n      const handler = this.events[eventName].bind(this);\n      this.webSocket[`on${eventName}`] = handler;\n    }\n  }\n  uninstallEventHandlers() {\n    for (let eventName in this.events) {\n      this.webSocket[`on${eventName}`] = function() {};\n    }\n  }\n}\n\nConnection.reopenDelay = 500;\n\nConnection.prototype.events = {\n  message(event) {\n    if (!this.isProtocolSupported()) {\n      return;\n    }\n    const {identifier: identifier, message: message, reason: reason, reconnect: reconnect, type: type} = JSON.parse(event.data);\n    this.monitor.recordMessage();\n    switch (type) {\n     case message_types.welcome:\n      if (this.triedToReconnect()) {\n        this.reconnectAttempted = true;\n      }\n      this.monitor.recordConnect();\n      return this.subscriptions.reload();\n\n     case message_types.disconnect:\n      logger.log(`Disconnecting. Reason: ${reason}`);\n      return this.close({\n        allowReconnect: reconnect\n      });\n\n     case message_types.ping:\n      return null;\n\n     case message_types.confirmation:\n      this.subscriptions.confirmSubscription(identifier);\n      if (this.reconnectAttempted) {\n        this.reconnectAttempted = false;\n        return this.subscriptions.notify(identifier, \"connected\", {\n          reconnected: true\n        });\n      } else {\n        return this.subscriptions.notify(identifier, \"connected\", {\n          reconnected: false\n        });\n      }\n\n     case message_types.rejection:\n      return this.subscriptions.reject(identifier);\n\n     default:\n      return this.subscriptions.notify(identifier, \"received\", message);\n    }\n  },\n  open() {\n    logger.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);\n    this.disconnected = false;\n    if (!this.isProtocolSupported()) {\n      logger.log(\"Protocol is unsupported. Stopping monitor and disconnecting.\");\n      return this.close({\n        allowReconnect: false\n      });\n    }\n  },\n  close(event) {\n    logger.log(\"WebSocket onclose event\");\n    if (this.disconnected) {\n      return;\n    }\n    this.disconnected = true;\n    this.monitor.recordDisconnect();\n    return this.subscriptions.notifyAll(\"disconnected\", {\n      willAttemptReconnect: this.monitor.isRunning()\n    });\n  },\n  error() {\n    logger.log(\"WebSocket onerror event\");\n  }\n};\n\nconst extend = function(object, properties) {\n  if (properties != null) {\n    for (let key in properties) {\n      const value = properties[key];\n      object[key] = value;\n    }\n  }\n  return object;\n};\n\nclass Subscription {\n  constructor(consumer, params = {}, mixin) {\n    this.consumer = consumer;\n    this.identifier = JSON.stringify(params);\n    extend(this, mixin);\n  }\n  perform(action, data = {}) {\n    data.action = action;\n    return this.send(data);\n  }\n  send(data) {\n    return this.consumer.send({\n      command: \"message\",\n      identifier: this.identifier,\n      data: JSON.stringify(data)\n    });\n  }\n  unsubscribe() {\n    return this.consumer.subscriptions.remove(this);\n  }\n}\n\nclass SubscriptionGuarantor {\n  constructor(subscriptions) {\n    this.subscriptions = subscriptions;\n    this.pendingSubscriptions = [];\n  }\n  guarantee(subscription) {\n    if (this.pendingSubscriptions.indexOf(subscription) == -1) {\n      logger.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);\n      this.pendingSubscriptions.push(subscription);\n    } else {\n      logger.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);\n    }\n    this.startGuaranteeing();\n  }\n  forget(subscription) {\n    logger.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);\n    this.pendingSubscriptions = this.pendingSubscriptions.filter((s => s !== subscription));\n  }\n  startGuaranteeing() {\n    this.stopGuaranteeing();\n    this.retrySubscribing();\n  }\n  stopGuaranteeing() {\n    clearTimeout(this.retryTimeout);\n  }\n  retrySubscribing() {\n    this.retryTimeout = setTimeout((() => {\n      if (this.subscriptions && typeof this.subscriptions.subscribe === \"function\") {\n        this.pendingSubscriptions.map((subscription => {\n          logger.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);\n          this.subscriptions.subscribe(subscription);\n        }));\n      }\n    }), 500);\n  }\n}\n\nclass Subscriptions {\n  constructor(consumer) {\n    this.consumer = consumer;\n    this.guarantor = new SubscriptionGuarantor(this);\n    this.subscriptions = [];\n  }\n  create(channelName, mixin) {\n    const channel = channelName;\n    const params = typeof channel === \"object\" ? channel : {\n      channel: channel\n    };\n    const subscription = new Subscription(this.consumer, params, mixin);\n    return this.add(subscription);\n  }\n  add(subscription) {\n    this.subscriptions.push(subscription);\n    this.consumer.ensureActiveConnection();\n    this.notify(subscription, \"initialized\");\n    this.subscribe(subscription);\n    return subscription;\n  }\n  remove(subscription) {\n    this.forget(subscription);\n    if (!this.findAll(subscription.identifier).length) {\n      this.sendCommand(subscription, \"unsubscribe\");\n    }\n    return subscription;\n  }\n  reject(identifier) {\n    return this.findAll(identifier).map((subscription => {\n      this.forget(subscription);\n      this.notify(subscription, \"rejected\");\n      return subscription;\n    }));\n  }\n  forget(subscription) {\n    this.guarantor.forget(subscription);\n    this.subscriptions = this.subscriptions.filter((s => s !== subscription));\n    return subscription;\n  }\n  findAll(identifier) {\n    return this.subscriptions.filter((s => s.identifier === identifier));\n  }\n  reload() {\n    return this.subscriptions.map((subscription => this.subscribe(subscription)));\n  }\n  notifyAll(callbackName, ...args) {\n    return this.subscriptions.map((subscription => this.notify(subscription, callbackName, ...args)));\n  }\n  notify(subscription, callbackName, ...args) {\n    let subscriptions;\n    if (typeof subscription === \"string\") {\n      subscriptions = this.findAll(subscription);\n    } else {\n      subscriptions = [ subscription ];\n    }\n    return subscriptions.map((subscription => typeof subscription[callbackName] === \"function\" ? subscription[callbackName](...args) : undefined));\n  }\n  subscribe(subscription) {\n    if (this.sendCommand(subscription, \"subscribe\")) {\n      this.guarantor.guarantee(subscription);\n    }\n  }\n  confirmSubscription(identifier) {\n    logger.log(`Subscription confirmed ${identifier}`);\n    this.findAll(identifier).map((subscription => this.guarantor.forget(subscription)));\n  }\n  sendCommand(subscription, command) {\n    const {identifier: identifier} = subscription;\n    return this.consumer.send({\n      command: command,\n      identifier: identifier\n    });\n  }\n}\n\nclass Consumer {\n  constructor(url) {\n    this._url = url;\n    this.subscriptions = new Subscriptions(this);\n    this.connection = new Connection(this);\n    this.subprotocols = [];\n  }\n  get url() {\n    return createWebSocketURL(this._url);\n  }\n  send(data) {\n    return this.connection.send(data);\n  }\n  connect() {\n    return this.connection.open();\n  }\n  disconnect() {\n    return this.connection.close({\n      allowReconnect: false\n    });\n  }\n  ensureActiveConnection() {\n    if (!this.connection.isActive()) {\n      return this.connection.open();\n    }\n  }\n  addSubProtocol(subprotocol) {\n    this.subprotocols = [ ...this.subprotocols, subprotocol ];\n  }\n}\n\nfunction createWebSocketURL(url) {\n  if (typeof url === \"function\") {\n    url = url();\n  }\n  if (url && !/^wss?:/i.test(url)) {\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.href = a.href;\n    a.protocol = a.protocol.replace(\"http\", \"ws\");\n    return a.href;\n  } else {\n    return url;\n  }\n}\n\nfunction createConsumer(url = getConfig(\"url\") || INTERNAL.default_mount_path) {\n  return new Consumer(url);\n}\n\nfunction getConfig(name) {\n  const element = document.head.querySelector(`meta[name='action-cable-${name}']`);\n  if (element) {\n    return element.getAttribute(\"content\");\n  }\n}\n\nexport { Connection, ConnectionMonitor, Consumer, INTERNAL, Subscription, SubscriptionGuarantor, Subscriptions, adapters, createConsumer, createWebSocketURL, getConfig, logger };\n", "import { createConsumer } from \"@rails/actioncable\"\n\nconsole.log('[cable] Creating ActionCable consumer')\nexport const consumer = createConsumer()\nconsole.log('[cable] Consumer created:', consumer)\n\n// Expose consumer globally for debugging\nif (typeof window !== 'undefined') {\n  (window as any).debugConsumer = consumer\n  console.log('[cable] Consumer exposed globally as window.debugConsumer')\n}\n\n"],
  "mappings": ";AAAA,IAAI,WAAW;AAAA,EACb,QAAQ,OAAO,YAAY,cAAc,UAAU;AAAA,EACnD,WAAW,OAAO,cAAc,cAAc,YAAY;AAC5D;AAEA,IAAI,SAAS;AAAA,EACX,OAAO,UAAU;AACf,QAAI,KAAK,SAAS;AAChB,eAAS,KAAK,KAAK,IAAI,CAAC;AACxB,eAAS,OAAO,IAAI,iBAAiB,GAAG,QAAQ;AAAA,IAClD;AAAA,EACF;AACF;AAEA,IAAM,MAAM,OAAO,oBAAI,QAAM,QAAQ;AAErC,IAAM,eAAe,WAAS,IAAI,IAAI,QAAQ;AAE9C,IAAM,oBAAN,MAAwB;AAAA,EACtB,YAAY,YAAY;AACtB,SAAK,sBAAsB,KAAK,oBAAoB,KAAK,IAAI;AAC7D,SAAK,aAAa;AAClB,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EACA,QAAQ;AACN,QAAI,CAAC,KAAK,UAAU,GAAG;AACrB,WAAK,YAAY,IAAI;AACrB,aAAO,KAAK;AACZ,WAAK,aAAa;AAClB,uBAAiB,oBAAoB,KAAK,mBAAmB;AAC7D,aAAO,IAAI,gDAAgD,KAAK,YAAY,cAAc,IAAI;AAAA,IAChG;AAAA,EACF;AAAA,EACA,OAAO;AACL,QAAI,KAAK,UAAU,GAAG;AACpB,WAAK,YAAY,IAAI;AACrB,WAAK,YAAY;AACjB,0BAAoB,oBAAoB,KAAK,mBAAmB;AAChE,aAAO,IAAI,2BAA2B;AAAA,IACxC;AAAA,EACF;AAAA,EACA,YAAY;AACV,WAAO,KAAK,aAAa,CAAC,KAAK;AAAA,EACjC;AAAA,EACA,gBAAgB;AACd,SAAK,WAAW,IAAI;AAAA,EACtB;AAAA,EACA,gBAAgB;AACd,SAAK,oBAAoB;AACzB,WAAO,KAAK;AACZ,WAAO,IAAI,oCAAoC;AAAA,EACjD;AAAA,EACA,mBAAmB;AACjB,SAAK,iBAAiB,IAAI;AAC1B,WAAO,IAAI,uCAAuC;AAAA,EACpD;AAAA,EACA,eAAe;AACb,SAAK,YAAY;AACjB,SAAK,KAAK;AAAA,EACZ;AAAA,EACA,cAAc;AACZ,iBAAa,KAAK,WAAW;AAAA,EAC/B;AAAA,EACA,OAAO;AACL,SAAK,cAAc,YAAY,MAAM;AACnC,WAAK,iBAAiB;AACtB,WAAK,KAAK;AAAA,IACZ,IAAI,KAAK,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA,kBAAkB;AAChB,UAAM,EAAC,gBAAgC,wBAAgD,IAAI,KAAK;AAChG,UAAM,UAAU,KAAK,IAAI,IAAI,yBAAyB,KAAK,IAAI,KAAK,mBAAmB,EAAE,CAAC;AAC1F,UAAM,YAAY,KAAK,sBAAsB,IAAI,IAAI;AACrD,UAAM,SAAS,YAAY,KAAK,OAAO;AACvC,WAAO,iBAAiB,MAAM,WAAW,IAAI;AAAA,EAC/C;AAAA,EACA,mBAAmB;AACjB,QAAI,KAAK,kBAAkB,GAAG;AAC5B,aAAO,IAAI,oEAAoE,KAAK,iBAAiB,kBAAkB,aAAa,KAAK,WAAW,CAAC,yBAAyB,KAAK,YAAY,cAAc,IAAI;AACjN,WAAK;AACL,UAAI,KAAK,qBAAqB,GAAG;AAC/B,eAAO,IAAI,+EAA+E,aAAa,KAAK,cAAc,CAAC,IAAI;AAAA,MACjI,OAAO;AACL,eAAO,IAAI,6BAA6B;AACxC,aAAK,WAAW,OAAO;AAAA,MACzB;AAAA,IACF;AAAA,EACF;AAAA,EACA,IAAI,cAAc;AAChB,WAAO,KAAK,WAAW,KAAK,WAAW,KAAK;AAAA,EAC9C;AAAA,EACA,oBAAoB;AAClB,WAAO,aAAa,KAAK,WAAW,IAAI,KAAK,YAAY;AAAA,EAC3D;AAAA,EACA,uBAAuB;AACrB,WAAO,KAAK,kBAAkB,aAAa,KAAK,cAAc,IAAI,KAAK,YAAY;AAAA,EACrF;AAAA,EACA,sBAAsB;AACpB,QAAI,SAAS,oBAAoB,WAAW;AAC1C,kBAAY,MAAM;AAChB,YAAI,KAAK,kBAAkB,KAAK,CAAC,KAAK,WAAW,OAAO,GAAG;AACzD,iBAAO,IAAI,uFAAuF,SAAS,eAAe,EAAE;AAC5H,eAAK,WAAW,OAAO;AAAA,QACzB;AAAA,MACF,IAAI,GAAG;AAAA,IACT;AAAA,EACF;AACF;AAEA,kBAAkB,iBAAiB;AAEnC,kBAAkB,0BAA0B;AAE5C,IAAI,WAAW;AAAA,EACb,eAAe;AAAA,IACb,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,cAAc;AAAA,IACd,WAAW;AAAA,EACb;AAAA,EACA,oBAAoB;AAAA,IAClB,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,QAAQ;AAAA,EACV;AAAA,EACA,oBAAoB;AAAA,EACpB,WAAW,CAAE,uBAAuB,yBAA0B;AAChE;AAEA,IAAM,EAAC,eAA8B,UAAoB,IAAI;AAE7D,IAAM,qBAAqB,UAAU,MAAM,GAAG,UAAU,SAAS,CAAC;AAElE,IAAM,UAAU,CAAC,EAAE;AAEnB,IAAM,aAAN,MAAiB;AAAA,EACf,YAAYA,WAAU;AACpB,SAAK,OAAO,KAAK,KAAK,KAAK,IAAI;AAC/B,SAAK,WAAWA;AAChB,SAAK,gBAAgB,KAAK,SAAS;AACnC,SAAK,UAAU,IAAI,kBAAkB,IAAI;AACzC,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,KAAK,MAAM;AACT,QAAI,KAAK,OAAO,GAAG;AACjB,WAAK,UAAU,KAAK,KAAK,UAAU,IAAI,CAAC;AACxC,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,OAAO;AACL,QAAI,KAAK,SAAS,GAAG;AACnB,aAAO,IAAI,uDAAuD,KAAK,SAAS,CAAC,EAAE;AACnF,aAAO;AAAA,IACT,OAAO;AACL,YAAM,kBAAkB,CAAE,GAAG,WAAW,GAAG,KAAK,SAAS,gBAAgB,CAAC,CAAE;AAC5E,aAAO,IAAI,uCAAuC,KAAK,SAAS,CAAC,mBAAmB,eAAe,EAAE;AACrG,UAAI,KAAK,WAAW;AAClB,aAAK,uBAAuB;AAAA,MAC9B;AACA,WAAK,YAAY,IAAI,SAAS,UAAU,KAAK,SAAS,KAAK,eAAe;AAC1E,WAAK,qBAAqB;AAC1B,WAAK,QAAQ,MAAM;AACnB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,MAAM,EAAC,eAA8B,IAAI;AAAA,IACvC,gBAAgB;AAAA,EAClB,GAAG;AACD,QAAI,CAAC,gBAAgB;AACnB,WAAK,QAAQ,KAAK;AAAA,IACpB;AACA,QAAI,KAAK,OAAO,GAAG;AACjB,aAAO,KAAK,UAAU,MAAM;AAAA,IAC9B;AAAA,EACF;AAAA,EACA,SAAS;AACP,WAAO,IAAI,yCAAyC,KAAK,SAAS,CAAC,EAAE;AACrE,QAAI,KAAK,SAAS,GAAG;AACnB,UAAI;AACF,eAAO,KAAK,MAAM;AAAA,MACpB,SAAS,OAAO;AACd,eAAO,IAAI,8BAA8B,KAAK;AAAA,MAChD,UAAE;AACA,eAAO,IAAI,0BAA0B,KAAK,YAAY,WAAW,IAAI;AACrE,mBAAW,KAAK,MAAM,KAAK,YAAY,WAAW;AAAA,MACpD;AAAA,IACF,OAAO;AACL,aAAO,KAAK,KAAK;AAAA,IACnB;AAAA,EACF;AAAA,EACA,cAAc;AACZ,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK,UAAU;AAAA,IACxB;AAAA,EACF;AAAA,EACA,SAAS;AACP,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC5B;AAAA,EACA,WAAW;AACT,WAAO,KAAK,QAAQ,QAAQ,YAAY;AAAA,EAC1C;AAAA,EACA,mBAAmB;AACjB,WAAO,KAAK,QAAQ,oBAAoB;AAAA,EAC1C;AAAA,EACA,sBAAsB;AACpB,WAAO,QAAQ,KAAK,oBAAoB,KAAK,YAAY,CAAC,KAAK;AAAA,EACjE;AAAA,EACA,WAAW,QAAQ;AACjB,WAAO,QAAQ,KAAK,QAAQ,KAAK,SAAS,CAAC,KAAK;AAAA,EAClD;AAAA,EACA,WAAW;AACT,QAAI,KAAK,WAAW;AAClB,eAAS,SAAS,SAAS,WAAW;AACpC,YAAI,SAAS,UAAU,KAAK,MAAM,KAAK,UAAU,YAAY;AAC3D,iBAAO,MAAM,YAAY;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,uBAAuB;AACrB,aAAS,aAAa,KAAK,QAAQ;AACjC,YAAM,UAAU,KAAK,OAAO,SAAS,EAAE,KAAK,IAAI;AAChD,WAAK,UAAU,KAAK,SAAS,EAAE,IAAI;AAAA,IACrC;AAAA,EACF;AAAA,EACA,yBAAyB;AACvB,aAAS,aAAa,KAAK,QAAQ;AACjC,WAAK,UAAU,KAAK,SAAS,EAAE,IAAI,WAAW;AAAA,MAAC;AAAA,IACjD;AAAA,EACF;AACF;AAEA,WAAW,cAAc;AAEzB,WAAW,UAAU,SAAS;AAAA,EAC5B,QAAQ,OAAO;AACb,QAAI,CAAC,KAAK,oBAAoB,GAAG;AAC/B;AAAA,IACF;AACA,UAAM,EAAC,YAAwB,SAAkB,QAAgB,WAAsB,KAAU,IAAI,KAAK,MAAM,MAAM,IAAI;AAC1H,SAAK,QAAQ,cAAc;AAC3B,YAAQ,MAAM;AAAA,MACb,KAAK,cAAc;AAClB,YAAI,KAAK,iBAAiB,GAAG;AAC3B,eAAK,qBAAqB;AAAA,QAC5B;AACA,aAAK,QAAQ,cAAc;AAC3B,eAAO,KAAK,cAAc,OAAO;AAAA,MAElC,KAAK,cAAc;AAClB,eAAO,IAAI,0BAA0B,MAAM,EAAE;AAC7C,eAAO,KAAK,MAAM;AAAA,UAChB,gBAAgB;AAAA,QAClB,CAAC;AAAA,MAEF,KAAK,cAAc;AAClB,eAAO;AAAA,MAER,KAAK,cAAc;AAClB,aAAK,cAAc,oBAAoB,UAAU;AACjD,YAAI,KAAK,oBAAoB;AAC3B,eAAK,qBAAqB;AAC1B,iBAAO,KAAK,cAAc,OAAO,YAAY,aAAa;AAAA,YACxD,aAAa;AAAA,UACf,CAAC;AAAA,QACH,OAAO;AACL,iBAAO,KAAK,cAAc,OAAO,YAAY,aAAa;AAAA,YACxD,aAAa;AAAA,UACf,CAAC;AAAA,QACH;AAAA,MAED,KAAK,cAAc;AAClB,eAAO,KAAK,cAAc,OAAO,UAAU;AAAA,MAE5C;AACC,eAAO,KAAK,cAAc,OAAO,YAAY,YAAY,OAAO;AAAA,IAClE;AAAA,EACF;AAAA,EACA,OAAO;AACL,WAAO,IAAI,kCAAkC,KAAK,YAAY,CAAC,eAAe;AAC9E,SAAK,eAAe;AACpB,QAAI,CAAC,KAAK,oBAAoB,GAAG;AAC/B,aAAO,IAAI,8DAA8D;AACzE,aAAO,KAAK,MAAM;AAAA,QAChB,gBAAgB;AAAA,MAClB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,MAAM,OAAO;AACX,WAAO,IAAI,yBAAyB;AACpC,QAAI,KAAK,cAAc;AACrB;AAAA,IACF;AACA,SAAK,eAAe;AACpB,SAAK,QAAQ,iBAAiB;AAC9B,WAAO,KAAK,cAAc,UAAU,gBAAgB;AAAA,MAClD,sBAAsB,KAAK,QAAQ,UAAU;AAAA,IAC/C,CAAC;AAAA,EACH;AAAA,EACA,QAAQ;AACN,WAAO,IAAI,yBAAyB;AAAA,EACtC;AACF;AAEA,IAAM,SAAS,SAAS,QAAQ,YAAY;AAC1C,MAAI,cAAc,MAAM;AACtB,aAAS,OAAO,YAAY;AAC1B,YAAM,QAAQ,WAAW,GAAG;AAC5B,aAAO,GAAG,IAAI;AAAA,IAChB;AAAA,EACF;AACA,SAAO;AACT;AAEA,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAYA,WAAU,SAAS,CAAC,GAAG,OAAO;AACxC,SAAK,WAAWA;AAChB,SAAK,aAAa,KAAK,UAAU,MAAM;AACvC,WAAO,MAAM,KAAK;AAAA,EACpB;AAAA,EACA,QAAQ,QAAQ,OAAO,CAAC,GAAG;AACzB,SAAK,SAAS;AACd,WAAO,KAAK,KAAK,IAAI;AAAA,EACvB;AAAA,EACA,KAAK,MAAM;AACT,WAAO,KAAK,SAAS,KAAK;AAAA,MACxB,SAAS;AAAA,MACT,YAAY,KAAK;AAAA,MACjB,MAAM,KAAK,UAAU,IAAI;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA,EACA,cAAc;AACZ,WAAO,KAAK,SAAS,cAAc,OAAO,IAAI;AAAA,EAChD;AACF;AAEA,IAAM,wBAAN,MAA4B;AAAA,EAC1B,YAAY,eAAe;AACzB,SAAK,gBAAgB;AACrB,SAAK,uBAAuB,CAAC;AAAA,EAC/B;AAAA,EACA,UAAU,cAAc;AACtB,QAAI,KAAK,qBAAqB,QAAQ,YAAY,KAAK,IAAI;AACzD,aAAO,IAAI,sCAAsC,aAAa,UAAU,EAAE;AAC1E,WAAK,qBAAqB,KAAK,YAAY;AAAA,IAC7C,OAAO;AACL,aAAO,IAAI,8CAA8C,aAAa,UAAU,EAAE;AAAA,IACpF;AACA,SAAK,kBAAkB;AAAA,EACzB;AAAA,EACA,OAAO,cAAc;AACnB,WAAO,IAAI,oCAAoC,aAAa,UAAU,EAAE;AACxE,SAAK,uBAAuB,KAAK,qBAAqB,QAAQ,OAAK,MAAM,aAAa;AAAA,EACxF;AAAA,EACA,oBAAoB;AAClB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AAAA,EACxB;AAAA,EACA,mBAAmB;AACjB,iBAAa,KAAK,YAAY;AAAA,EAChC;AAAA,EACA,mBAAmB;AACjB,SAAK,eAAe,YAAY,MAAM;AACpC,UAAI,KAAK,iBAAiB,OAAO,KAAK,cAAc,cAAc,YAAY;AAC5E,aAAK,qBAAqB,KAAK,kBAAgB;AAC7C,iBAAO,IAAI,uCAAuC,aAAa,UAAU,EAAE;AAC3E,eAAK,cAAc,UAAU,YAAY;AAAA,QAC3C,EAAE;AAAA,MACJ;AAAA,IACF,IAAI,GAAG;AAAA,EACT;AACF;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAYA,WAAU;AACpB,SAAK,WAAWA;AAChB,SAAK,YAAY,IAAI,sBAAsB,IAAI;AAC/C,SAAK,gBAAgB,CAAC;AAAA,EACxB;AAAA,EACA,OAAO,aAAa,OAAO;AACzB,UAAM,UAAU;AAChB,UAAM,SAAS,OAAO,YAAY,WAAW,UAAU;AAAA,MACrD;AAAA,IACF;AACA,UAAM,eAAe,IAAI,aAAa,KAAK,UAAU,QAAQ,KAAK;AAClE,WAAO,KAAK,IAAI,YAAY;AAAA,EAC9B;AAAA,EACA,IAAI,cAAc;AAChB,SAAK,cAAc,KAAK,YAAY;AACpC,SAAK,SAAS,uBAAuB;AACrC,SAAK,OAAO,cAAc,aAAa;AACvC,SAAK,UAAU,YAAY;AAC3B,WAAO;AAAA,EACT;AAAA,EACA,OAAO,cAAc;AACnB,SAAK,OAAO,YAAY;AACxB,QAAI,CAAC,KAAK,QAAQ,aAAa,UAAU,EAAE,QAAQ;AACjD,WAAK,YAAY,cAAc,aAAa;AAAA,IAC9C;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,YAAY;AACjB,WAAO,KAAK,QAAQ,UAAU,EAAE,KAAK,kBAAgB;AACnD,WAAK,OAAO,YAAY;AACxB,WAAK,OAAO,cAAc,UAAU;AACpC,aAAO;AAAA,IACT,EAAE;AAAA,EACJ;AAAA,EACA,OAAO,cAAc;AACnB,SAAK,UAAU,OAAO,YAAY;AAClC,SAAK,gBAAgB,KAAK,cAAc,QAAQ,OAAK,MAAM,aAAa;AACxE,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,YAAY;AAClB,WAAO,KAAK,cAAc,QAAQ,OAAK,EAAE,eAAe,WAAW;AAAA,EACrE;AAAA,EACA,SAAS;AACP,WAAO,KAAK,cAAc,KAAK,kBAAgB,KAAK,UAAU,YAAY,EAAE;AAAA,EAC9E;AAAA,EACA,UAAU,iBAAiB,MAAM;AAC/B,WAAO,KAAK,cAAc,KAAK,kBAAgB,KAAK,OAAO,cAAc,cAAc,GAAG,IAAI,EAAE;AAAA,EAClG;AAAA,EACA,OAAO,cAAc,iBAAiB,MAAM;AAC1C,QAAI;AACJ,QAAI,OAAO,iBAAiB,UAAU;AACpC,sBAAgB,KAAK,QAAQ,YAAY;AAAA,IAC3C,OAAO;AACL,sBAAgB,CAAE,YAAa;AAAA,IACjC;AACA,WAAO,cAAc,KAAK,CAAAC,kBAAgB,OAAOA,cAAa,YAAY,MAAM,aAAaA,cAAa,YAAY,EAAE,GAAG,IAAI,IAAI,OAAU;AAAA,EAC/I;AAAA,EACA,UAAU,cAAc;AACtB,QAAI,KAAK,YAAY,cAAc,WAAW,GAAG;AAC/C,WAAK,UAAU,UAAU,YAAY;AAAA,IACvC;AAAA,EACF;AAAA,EACA,oBAAoB,YAAY;AAC9B,WAAO,IAAI,0BAA0B,UAAU,EAAE;AACjD,SAAK,QAAQ,UAAU,EAAE,KAAK,kBAAgB,KAAK,UAAU,OAAO,YAAY,EAAE;AAAA,EACpF;AAAA,EACA,YAAY,cAAc,SAAS;AACjC,UAAM,EAAC,WAAsB,IAAI;AACjC,WAAO,KAAK,SAAS,KAAK;AAAA,MACxB;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEA,IAAM,WAAN,MAAe;AAAA,EACb,YAAY,KAAK;AACf,SAAK,OAAO;AACZ,SAAK,gBAAgB,IAAI,cAAc,IAAI;AAC3C,SAAK,aAAa,IAAI,WAAW,IAAI;AACrC,SAAK,eAAe,CAAC;AAAA,EACvB;AAAA,EACA,IAAI,MAAM;AACR,WAAO,mBAAmB,KAAK,IAAI;AAAA,EACrC;AAAA,EACA,KAAK,MAAM;AACT,WAAO,KAAK,WAAW,KAAK,IAAI;AAAA,EAClC;AAAA,EACA,UAAU;AACR,WAAO,KAAK,WAAW,KAAK;AAAA,EAC9B;AAAA,EACA,aAAa;AACX,WAAO,KAAK,WAAW,MAAM;AAAA,MAC3B,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH;AAAA,EACA,yBAAyB;AACvB,QAAI,CAAC,KAAK,WAAW,SAAS,GAAG;AAC/B,aAAO,KAAK,WAAW,KAAK;AAAA,IAC9B;AAAA,EACF;AAAA,EACA,eAAe,aAAa;AAC1B,SAAK,eAAe,CAAE,GAAG,KAAK,cAAc,WAAY;AAAA,EAC1D;AACF;AAEA,SAAS,mBAAmB,KAAK;AAC/B,MAAI,OAAO,QAAQ,YAAY;AAC7B,UAAM,IAAI;AAAA,EACZ;AACA,MAAI,OAAO,CAAC,UAAU,KAAK,GAAG,GAAG;AAC/B,UAAM,IAAI,SAAS,cAAc,GAAG;AACpC,MAAE,OAAO;AACT,MAAE,OAAO,EAAE;AACX,MAAE,WAAW,EAAE,SAAS,QAAQ,QAAQ,IAAI;AAC5C,WAAO,EAAE;AAAA,EACX,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEA,SAAS,eAAe,MAAM,UAAU,KAAK,KAAK,SAAS,oBAAoB;AAC7E,SAAO,IAAI,SAAS,GAAG;AACzB;AAEA,SAAS,UAAU,MAAM;AACvB,QAAM,UAAU,SAAS,KAAK,cAAc,2BAA2B,IAAI,IAAI;AAC/E,MAAI,SAAS;AACX,WAAO,QAAQ,aAAa,SAAS;AAAA,EACvC;AACF;;;AC3fA,QAAQ,IAAI,uCAAuC;AAC5C,IAAM,WAAW,eAAe;AACvC,QAAQ,IAAI,6BAA6B,QAAQ;AAGjD,IAAI,OAAO,WAAW,aAAa;AACjC,EAAC,OAAe,gBAAgB;AAChC,UAAQ,IAAI,2DAA2D;AACzE;",
  "names": ["consumer", "subscription"]
}
